import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.functional as F
from collections import deque
import random
from matplotlib import pyplot as plt


class StockMarketEnv:
    def __init__(self, data, initial_cash):
        self.data = data
        self.initial_cash = initial_cash
        self.cash = initial_cash
        self.stock = 0
        self.current_step = 0
        self.trade_count = 0  # 新增交易计数器

        self.trade_log = []  # 新增一个列表来记录交易

    def log_trade(self, action, close_price, fee):
        # 记录交易
        self.trade_log.append({
            'step': self.current_step,
            'action': action,
            'price': close_price,
            'fee': fee,
            'cash': self.cash,
            'stock': self.stock
        })
    def step(self, action):
        row = self.data.iloc[self.current_step]
        close_price = row['close']
        if action == 1:  # 买入
            total_cost = close_price  # 一股的成本
            fee = total_cost * 0.0005  # 0.05% 的手续费
            self.log_trade(action, close_price, fee)
            if self.cash >= total_cost + fee:
                self.stock += 1
                self.cash -= (total_cost + fee)
        elif action == 2:  # 卖出
            if self.stock > 0:
                total_revenue = close_price  # 一股的收入
                fee = total_revenue * 0.0005  # 0.05% 的手续费

                self.stock -= 1
                self.cash += (total_revenue - fee)
                self.log_trade(action, close_price, fee)
        self.current_step += 1
        done = self.current_step >= len(self.data)


        if done:
            next_state = None
            reward = self.cash + self.stock * self.data.iloc[-1]['close'] - self.initial_cash
        else:
            next_state = self.get_state()
            reward = self.cash + self.stock * row['close'] - self.initial_cash

        return next_state, reward, done

    def get_state(self):
        row = self.data.iloc[self.current_step]
        # print(row)
        return np.array([row['open'], row['high'], row['low'], row['close'], row['volume'], self.cash, self.stock])

    def reset(self):
        self.cash = self.initial_cash
        self.stock = 0
        self.trade_count = 0
        self.current_step = 0
        return self.get_state()

    def save_trade_log(self, filename):
        # 将交易记录保存到 CSV 文件
        df = pd.DataFrame(self.trade_log)
        df.to_csv(filename, index=False)
class LSTMNetwork(nn.Module):
    def __init__(self, input_size, hidden_layer_size=128, output_size=3):
        super(LSTMNetwork, self).__init__()
        self.hidden_layer_size = hidden_layer_size
        self.lstm = nn.LSTM(input_size, hidden_layer_size)
        self.linear = nn.Linear(hidden_layer_size, output_size)
        self.hidden_cell = (torch.zeros(1,1,self.hidden_layer_size).cuda(),
                            torch.zeros(1,1,self.hidden_layer_size).cuda())

    def forward(self, input_seq):
        lstm_out, self.hidden_cell = self.lstm(input_seq.view(len(input_seq), 1, -1), self.hidden_cell)
        predictions = self.linear(lstm_out.view(len(input_seq), -1))
        return predictions[-1]
class QNetwork(nn.Module):
    def __init__(self, state_size, action_size, hidden_size=128):
        super(QNetwork, self).__init__()
        self.fc1 = nn.Linear(state_size, hidden_size)  # 确保这里的 state_size 是正确的


        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, action_size)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class Agent:
    def __init__(self, state_size, action_size, gamma=0.99, epsilon_start=1.0, epsilon_end=0.01, epsilon_decay=0.995,
                 learning_rate=0.0005, memory_size=10000, batch_size=64):

    # def __init__(self, input_size, action_size, ...):如果用 lstm 修改这里  1
        self.state_size = state_size
        self.action_size = action_size
        self.gamma = gamma
        self.epsilon = epsilon_start
        self.epsilon_end = epsilon_end
        self.epsilon_decay = epsilon_decay
        self.learning_rate = learning_rate
        self.memory = deque(maxlen=memory_size)
        self.batch_size = batch_size

        self.q_network = QNetwork(state_size, action_size).cuda()

        # self.q_network = LSTMNetwork(input_size, hidden_size, action_size).cuda() #如果用 lstm 修改这里 2


        self.optimizer = torch.optim.Adam(self.q_network.parameters(), lr=learning_rate)
        self.loss_fn = nn.MSELoss()

    def choose_action(self, state):
        if np.random.rand() < self.epsilon:
            return np.random.choice(self.action_size)
        else:
            state = torch.from_numpy(state).float().cuda()
            with torch.no_grad():
                q_values = self.q_network(state)
            return q_values.argmax().item()

    # def choose_action(self, state):# 如果用 lstm 修改这里  3
    #     # 修改状态的形状以适应LSTM
    #     state = torch.from_numpy(state).float().unsqueeze(0).cuda()
    #     self.q_network.hidden_cell = (torch.zeros(1, 1, self.q_network.hidden_layer_size).cuda(),
    #                                   torch.zeros(1, 1, self.q_network.hidden_layer_size).cuda())
    #
    #     with torch.no_grad():
    #         q_values = self.q_network(state)
    #     return q_values.argmax().item()

    def store_experience(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def learn(self):
        if len(self.memory) < self.batch_size:
            return 0  # 如果不足一个 batch，返回 0

        samples = random.sample(self.memory, self.batch_size)
        states, actions, rewards, next_states, done = zip(*samples)

        states = torch.from_numpy(np.vstack(states)).float().cuda()
        actions = torch.from_numpy(np.array(actions)).long().cuda()
        rewards = torch.from_numpy(np.array(rewards)).float().cuda()
        next_states = torch.from_numpy(
            np.vstack([s if s is not None else np.zeros(self.state_size) for s in next_states])).float().cuda()
        done = torch.from_numpy(np.array(done).astype(int)).float().cuda()

        q_values = self.q_network(states).gather(1, actions.unsqueeze(1)).squeeze(1)
        next_q_values = self.q_network(next_states).max(1)[0]
        target_q_values = rewards + (1 - done) * self.gamma * next_q_values

        loss = self.loss_fn(q_values, target_q_values)

        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

        self.epsilon = max(self.epsilon_end, self.epsilon_decay * self.epsilon)

        return loss.item()  # 返回损失值

def evaluate_agent(env, agent):
    state = env.reset()
    total_reward = 0
    while True:
        action = agent.choose_action(state)
        next_state, reward, done = env.step(action)
        state = next_state
        total_reward += reward

        if done:
            break
    return total_reward


def train_agent(data, split_date, episodes=20, initial_cash=1000,
                gamma=0.99, epsilon_start=1.0, epsilon_end=0.01, epsilon_decay=0.995,
                learning_rate=0.0005, memory_size=10000, batch_size=64,
                state_size=6, action_size=3, hidden_size=128):
    # 用索引（而不是列）进行日期比较
    train_data = data.loc[data.index < split_date]
    test_data = data.loc[data.index >= split_date]
    # 初始化环境和代理
    train_env = StockMarketEnv(train_data, initial_cash)
    test_env = StockMarketEnv(test_data, initial_cash)
    agent = Agent(state_size, action_size, gamma, epsilon_start, epsilon_end, epsilon_decay,
                  learning_rate, memory_size, batch_size)

    train_rewards = []
    test_rewards = []
    losses = []

    for episode in range(1, episodes + 1):
        state = train_env.reset()
        total_reward = 0
        while True:
            action = agent.choose_action(state)
            next_state, reward, done = train_env.step(action)
            agent.store_experience(state, action, reward, next_state, done)
            loss = agent.learn()
            losses.append(loss)

            state = next_state
            total_reward += reward

            if done:
                break
            train_env.save_trade_log(f'trade_log_episode_{episode}.csv')
        train_rewards.append(total_reward)
        test_reward = evaluate_agent(test_env, agent)
        test_rewards.append(test_reward)
        print(f'Episode {episode}, Train Reward: {total_reward}, Test Reward: {test_reward}')

    torch.save(agent.q_network.state_dict(), 'q_network.pth')

    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.plot(train_rewards, label='Train Rewards')
    plt.plot(test_rewards, label='Test Rewards')
    plt.title('Rewards')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(losses)
    plt.title('Losses')

    plt.savefig('training_performance.png')
    plt.show()





# 加载和预处理数据
file_path = 'data_15m.csv'
data = pd.read_csv(file_path)
data['datetime'] = pd.to_datetime(data['datetime'])
data.set_index('datetime', inplace=True)

# 配置参数
split_date = '2023-02-10'
# 配置参数
# split_date = '2023-02-10'
time_window = '300T'
episodes = 20
initial_cash = 100000
gamma = 0.99
epsilon_start = 1.0
epsilon_end = 0.01
epsilon_decay = 0.995
learning_rate = 0.0005
memory_size = 10000
batch_size = 64
state_size = 7  # 根据实际的状态大小进行更新
action_size = 3
hidden_size = 128

# 重采样数据
# aggregated_data = data.resample(time_window).agg({
#     'open': 'first',
#     'high': 'max',
#     'low': 'min',
#     'close': 'last',
#     'volume': 'sum'
# }).dropna()
print(data)
# 训练模型
train_agent(data, split_date, episodes, initial_cash, gamma, epsilon_start, epsilon_end,
            epsilon_decay, learning_rate, memory_size, batch_size, state_size, action_size, hidden_size)
